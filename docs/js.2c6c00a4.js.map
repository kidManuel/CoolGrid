{"version":3,"sources":["js/state.js","js/module.js","js/line.js","js/const.js","js/cssHandler.js","js/mathUtil.js","js/index.js"],"names":["state","rowsAmmount","columnsAmmount","centerTolerance","minSpeed","maxSpeed","containerHeight","containerWidth","containerRatio","moduleSize","center","X","Y","maxPossibleDistance","Infinity","shouldAnimate","force","prevForce","modules","x","y","allModules","hash","getNewHash","module","isGhost","content","getHorizontalSpeed","getVerticalSpeed","number","id","top","left","linkedTo","domElement","createDomElement","setAsGhost","offset","null","frameMovementVector","position","ammount","setForce","signedAmmount","Math","min","abs","sign","calculateCurrentFrameOffset","axis","forceAmmount","isVert","linkTo","classList","toggle","newElement","document","createElement","className","getStringContent","resetMovementVector","getContent","line","data","contents","ghost","speed","element","newPosition","resetElement","isCurrentMovementPositive","splice","unshift","push","forEach","singleModule","order","elementToLink","getLast","getFirst","linkGhostToElement","length","container","getElementById","modulePositions","body","getElementsByTagName","devModeToggle","quadrants","bot","right","positions","horizontalIdentity","inverseAxis","verticalIdentity","forces","quadrantName","direction","inverse","message","cssHandler","modulesList","frameCss","moduleCss","textContent","getModuleCss","getStyleString","applyCssToDom","resetFrameCss","pyth","a","b","sqrt","pow","distance","x1","y1","x2","y2","map","n","start1","stop1","start2","stop2","withinBounds","newval","constrain","low","high","max","constants","setup","reduce","acc","curr","floor","offsetHeight","console","log","style","height","width","baseCss","nullForce","prepModules","getAllCss","setListeners","i","currentHorizontalLine","e","currentVerticalLine","getSpeed","bind","appendChild","newGhost","toggleDevMode","checked","addEventListener","inBounds","changeQuadrant","event","clientX","clientY","calculateQuadrant","calculateLinesSpeed","newQuad","calculateOffset","mouseX","mouseY","getBoundingClientRect","localX","localY","linesToCalc","RatioFixedDistanceToCenter","distanceToCenterModifier","singleLine","round","offsetLeft","offsetTop","animationFrame","setNewPositions","requestAnimationFrame","setModulePosition","setGhostPosition","bottom","getBottom","getRight","outstandingAmmount","compileFrameMovementVector","shiftElement","getLine","shiftedElement","shiftLine","lines","currentLine","moduleToCheck","negative","positive","containerSize","sort","applyOffset","window"],"mappings":";AAAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EAAA,IAAIA,EAAQ,CACRC,YAAa,EACbC,eAAgB,EAEhBC,gBAAiB,GAGjBC,SAAU,EACVC,SAAU,GAGVC,gBAAiB,EACjBC,eAAgB,EAChBC,eAAgB,EAChBC,WAAY,EACZC,OAAQ,CACJC,EAAG,KACHC,EAAG,MAEPC,oBAAqBC,EAAAA,EACrBC,eAAe,EACfC,MAAO,GACPC,UAAW,GACXC,QAAS,CACLC,EAAG,GACHC,EAAG,IAEPC,WAAY,IA3BhB,QAAA,MAAA;;ACmIK,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAnIL,IAAA,EAAA,QAAA,WAmIK,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAjIL,IAAIC,EAAO,EACLC,EAAa,WAAMD,OAAAA,KAEJE,EA8HhB,WA7HWL,SAAAA,EAAAA,EAAGC,GAAGK,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAAOC,EAA+C,UAAA,OAAA,EAAA,UAAA,QAAA,EAAtCC,EAAsC,UAAA,OAAA,EAAA,UAAA,QAAA,EAAlBC,EAAkB,UAAA,OAAA,EAAA,UAAA,QAAA,EAAA,EAAA,KAAA,GACxEnB,IAAAA,EAAeT,EADyD,MACxES,WACDU,KAAAA,EAAIA,EACJC,KAAAA,EAAIA,EACJS,KAAAA,OAASN,IACTO,KAAAA,GAAS,IAAA,OAAA,KAAKX,EAAK,KAAA,OAAA,KAAKC,GAAIK,OAAAA,EAAU,IAAM,IAC5CM,KAAAA,IAAMX,EAAIX,EACVuB,KAAAA,KAAOb,EAAIV,EACXwB,KAAAA,SAAW,KACXC,KAAAA,WAAa,KAAKC,mBAClBC,KAAAA,WAAWX,GACXY,KAAAA,OAAS,CACVN,IAAK,EACLC,KAAM,EACNM,KAAM,GAELC,KAAAA,oBAAsB,CACvBR,IAAK,EACLC,KAAM,GAELN,KAAAA,QAAUA,EACVC,KAAAA,mBAAqBA,EACrBC,KAAAA,iBAAmBA,EAuG3B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,WApGU,MAAA,WACDnB,IAAAA,EAAeT,EADd,MACDS,WACC,OAAA,KAAKuB,KAAOvB,IAkGtB,CAAA,IAAA,YA/FW,MAAA,WACFA,IAAAA,EAAeT,EADb,MACFS,WACC,OAAA,KAAKsB,IAAMtB,IA6FrB,CAAA,IAAA,WA1FQ+B,MAAAA,SAAAA,EAAUC,GACVF,KAAAA,oBAAoBC,GAAYC,IAyFxC,CAAA,IAAA,sBAtFqB,MAAA,WACbC,KAAAA,SAAS,MAAO,GAChBA,KAAAA,SAAS,OAAQ,KAoFzB,CAAA,IAAA,cAjFWF,MAAAA,SAAAA,EAAUC,GACVJ,IAAAA,EAAW,KAAXA,OAGJA,EAAOG,GADPC,GAGmB,IA2E1B,CAAA,IAAA,8BAvE6B,MAAA,WAClBJ,IAAAA,EAAW,KAAXA,OACJA,GAAAA,EAAON,IAAK,CACJA,IAAAA,EAAQM,EAARN,IAKFY,EADkBC,KAAKC,IAAID,KAAKE,IAAIf,GAAM/B,EAAMK,MAAAA,UACduC,KAAKG,KAAKhB,GAE7CW,KAAAA,SAAS,MAAOC,GAGrBN,EAAON,KAAOY,EAEdN,GAAAA,EAAOL,KAAM,CACLA,IAAAA,EAASK,EAATL,KAEFW,EADkBC,KAAKC,IAAID,KAAKE,IAAId,GAAOhC,EAAMK,MAAAA,UACfuC,KAAKG,KAAKf,GAE7CU,KAAAA,SAAS,OAAQC,GACtBN,EAAOL,MAAQW,KAkDtB,CAAA,IAAA,6BA9C4B,MAAA,WAKrB3C,GAHCgD,KAAAA,8BAGDhD,EAAMgB,MAAAA,MAAMiC,KAAM,CACZT,IAAAA,EAAWxC,EAAMgB,MAAAA,MAAMwB,SACvBU,EAAelD,EAAMgB,MAAAA,MAAMmC,OAAS,KAAKvB,mBAAqB,KAAKD,qBAEpEe,KAAAA,SAASF,EAAUU,MAqC/B,CAAA,IAAA,aAjCUzB,MAAAA,SAAAA,EAAS2B,GACX3B,KAAAA,QAAUA,EACVQ,KAAAA,SAAWR,GAAW2B,EAASA,EAAS,KACxClB,KAAAA,WAAWmB,UAAUC,OAAO,QAAS7B,KA8B7C,CAAA,IAAA,mBA3BkB,MAAA,WACX8B,IAAAA,EAAaC,SAASC,cAAc,OAGjCF,OAFPA,EAAWG,UAAY,SACvBH,EAAWzB,GAAK,KAAKA,GACdyB,IAuBV,CAAA,IAAA,aApBY,MAAA,WACM,OAAA,EAAA,KAAK7B,UACX,IAAA,SACM,OAAA,KAAKiC,mBAChB,QACW,MAAA,MAelB,CAAA,IAAA,mBAXkB,MAAA,WACPjC,IAAAA,EAAY,KAAZA,QACK,MAAA,MAAA,OAAA,KAAKI,GAAuBJ,sBAAAA,OAAAA,EAAzC,OASH,CAAA,IAAA,iBANgB,MAAA,WAKF,OAJNK,KAAAA,KAAO,KAAKQ,oBAAoBR,IAChCC,KAAAA,MAAQ,KAAKO,oBAAoBP,KACjC4B,KAAAA,sBAEM,IAAA,OAAA,KAAK9B,GAAY,WAAA,OAAA,KAAKC,IAAe,aAAA,OAAA,KAAKC,KAAW,QAAA,OAAA,KAAK6B,aAArE,SACH,EAAA,GAAA,QAAA,QAAA;;AChDA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAnFL,IAAA,EAAA,QAAA,WAmFK,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAjFgBC,IAAAA,EAiFhB,WAhFWC,SAAAA,EAAAA,EAAMlC,GAAQ,EAAA,KAAA,GACjBkC,KAAAA,KAAOA,EACPlC,KAAAA,OAASA,EACTmC,KAAAA,SAAW,GACXC,KAAAA,MAAQ,KACRC,KAAAA,MAAQ,EA2EhB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,qBAxEkBC,MAAAA,SAAAA,GACG,KAAVF,MACFhC,SAAWkC,IAsEpB,CAAA,IAAA,mBAnEkB,MAAA,WACPF,IAAAA,EAAU,KAAVA,MACAhC,EAAagC,EAAbhC,SAIJ,GAAA,KAAK8B,KAAKZ,OAAQ,CACVpB,IAAAA,EAA6BE,EAA7BF,IAAKQ,EAAwBN,EAAxBM,oBAQP6B,EAAcrC,EAPQ/B,EAFV,MAEVM,kBAI6B,EAAlBsC,KAAKG,KAAKhB,IAAc,GAGeQ,EAAoBR,IAC9EkC,EAAMlC,IAAMqC,EACZH,EAAMjC,KAAOiC,EAAMhC,SAASD,KAAOO,EAAoBP,SACpD,CACmCiC,IAAAA,EAAAA,EAAMhC,SAApCD,EAAAA,EAAAA,KAAMO,EAAAA,EAAAA,oBAGR6B,EAAcpC,EAFOhC,EAFxB,MAEKO,iBAC4B,EAAnBqC,KAAKG,KAAKf,IAAe,GACgBO,EAAoBP,KAC9EiC,EAAMjC,KAAOoC,EACbH,EAAMlC,IAAMkC,EAAMhC,SAASF,IAAMQ,EAAoBR,IAGzDkC,EAAMvC,QAAUO,EAASP,UAwC5B,CAAA,IAAA,YArCS2C,MAAAA,SAAAA,GACEJ,IAAAA,EAAoB,KAApBA,MAAOD,EAAa,KAAbA,SACPf,EAAS,KAAKc,KAAdd,KACFqB,EAA4BD,EAAa9B,oBAAoB,KAAKwB,KAAKvB,UAAY,EAGzFwB,EAASO,OAAOF,EAAa,KAAKN,KAAKd,MAAO,GAE1CqB,EACAN,EAASQ,QAAQH,GAEjBL,EAASS,KAAKJ,GAIlBL,EAASU,QAAQ,SAACC,EAAcC,GAC5BD,EAAa1B,GAAQ2B,IAGzBP,EAAatC,IAAMkC,EAAMlC,IACzBsC,EAAarC,KAAOiC,EAAMjC,KAEpB6C,IAAAA,EAAgBP,EAA4B,KAAKQ,UAAY,KAAKC,WACnEC,KAAAA,mBAAmBH,KAc3B,CAAA,IAAA,WAVU,MAAA,WACA,OAAA,KAAKb,SAAS,KASxB,CAAA,IAAA,UANS,MAAA,WACC,OAAA,KAAKA,SAAS,KAAKA,SAASiB,OAAS,KAK/C,CAAA,IAAA,WAFU,MAAA,WACA,OAAA,KAAKf,UACf,EAAA,GAAA,QAAA,QAAA;;ACrBE,aAAA,IAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,QAAA,OAAA,QAAA,iBAAA,QAAA,mBAAA,QAAA,UAAA,QAAA,UAAA,QAAA,cAAA,QAAA,KAAA,QAAA,gBAAA,QAAA,eAAA,EA9DA,IAAMgB,EAAY1B,SAAS2B,eAAe,mBA8D1C,QAAA,UAAA,EA7DA,IAAMC,EAAkB5B,SAAS2B,eAAe,mBA6DhD,QAAA,gBAAA,EA5DA,IAAME,EAAO7B,SAAS8B,qBAAqB,QAAQ,GA4DnD,QAAA,KAAA,EA3DA,IAAMC,EAAgB/B,SAAS2B,eAAe,iBA2D9C,QAAA,cAAA,EAzDA,IAAMK,EAAY,CACrBC,IAAK,SACL1D,IAAK,MACLC,KAAM,OACN0D,MAAO,SAqDJ,QAAA,UAAA,EAlDA,IAAMC,EAAY,CACrB3D,KAAM,OACND,IAAK,OAgDF,QAAA,UAAA,EA7CA,IAAM6D,EAAqB,CAC9B3C,KAAM,IACNE,QAAQ,EACRX,SAAU,OACVqD,YAAa,KAyCV,QAAA,mBAAA,EAtCA,IAAMC,EAAmB,CAC5B7C,KAAM,IACNE,QAAQ,EACRX,SAAU,MACVqD,YAAa,KAkCV,QAAA,iBAAA,EA/BA,IAAME,GACRP,EAAAA,EAAAA,GAAAA,EAAUC,IADI,EAAA,CAEXO,aAAcR,EAAUC,KACrBK,EAHQ,CAIXG,UAAW,KAEdT,EAAAA,EAAAA,EAAUzD,IANI,EAAA,CAOXiE,aAAcR,EAAUzD,KACrB+D,EARQ,CASXG,WAAY,KAEfT,EAAAA,EAAAA,EAAUxD,KAXI,EAAA,CAYXgE,aAAcR,EAAUxD,MACrB4D,EAbQ,CAcXK,WAAY,KAEfT,EAAAA,EAAAA,EAAUE,MAhBI,EAAA,CAiBXM,aAAcR,EAAUE,OACrBE,EAlBQ,CAmBXK,UAAW,KAEJ,EAAA,EAAA,YAAA,CACPD,aAAc,YACd/C,KAAM,KACNE,OAAQ,KACRX,SAAU,KACV0D,QAAS,KACTD,UAAW,OA3BZ,GA+BA,QAAA,OAAA,EAAA,IAAME,EAAU,CACnB,eACA,eACA,eACA,eACA,eACA,gBANG,QAAA,QAAA;;AChCQ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA9Bf,IAAA,EAAA,QAAA,WACA,EAAA,QAAA,WA6Be,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA3BTC,IAAAA,EA2BS,WA1BG,SAAA,IAAA,EAAA,KAAA,GACLC,KAAAA,YAAc,GACdC,KAAAA,SAAW,GAwBT,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,eArBEC,MAAAA,SAAAA,GACJD,KAAAA,UAAYC,IAoBV,CAAA,IAAA,gBAjBK,MAAA,WACPD,KAAAA,SAAW,KAgBT,CAAA,IAAA,gBAbK,MAAA,WACIE,EAAAA,gBAAAA,YAAc,KAAKF,WAY5B,CAAA,IAAA,YATC,MAAA,WAAA,IAAA,EAAA,KACFjF,EAAAA,MAAAA,WAAWqD,QAAQ,SAACC,GACtB,EAAK8B,aAAa9B,EAAa+B,oBAE9BC,KAAAA,gBACAC,KAAAA,oBAIE,EAAA,GAAA,EAAA,IAAIR,EAAJ,QAAA,QAAA;;ACVR,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,QAAA,IAAA,QAAA,SAAA,QAAA,UAAA,EApBA,IAAMS,EAAO,SAACC,EAAGC,GAAMnE,OAAAA,KAAKoE,KAAKpE,KAAKqE,IAAIH,EAAG,GAAKlE,KAAKqE,IAAIF,EAAG,KAoB9D,QAAA,KAAA,EAnBA,IAAMG,EAAW,SAACC,EAAIC,EAAIC,EAAIC,GAAOT,OAAAA,EAAKM,EAAKE,EAAID,EAAKE,IAmBxD,QAAA,SAAA,EAdA,IAAMC,EAAM,SAACC,EAAGC,EAAQC,EAAOC,EAAQC,EAAOC,GAC3CC,IAAAA,GAAUN,EAAIC,IAAWC,EAAQD,IAAWG,EAAQD,GAAUA,EAEhE,OAACE,EAIDF,EAASC,EACFG,EAAUD,EAAQH,EAAQC,GAE1BG,EAAUD,EAAQF,EAAOD,GANzBG,GAUR,QAAA,IAAA,EAAA,IAAMC,EAAY,SAACP,EAAGQ,EAAKC,GAASrF,OAAAA,KAAKsF,IAAItF,KAAKC,IAAI2E,EAAGS,GAAOD,IAAhE,QAAA,UAAA;;ACuSP,aA3TA,IAAA,EAAA,EAAA,QAAA,aACA,EAAA,EAAA,QAAA,WACA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,YACA,EAAA,QAAA,WACA,EAAA,QAAA,cAsTA,SAAA,IAAA,GAAA,mBAAA,QAAA,OAAA,KAAA,IAAA,EAAA,IAAA,QAAA,OAAA,EAAA,WAAA,OAAA,GAAA,EAAA,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,GAAA,OAAA,GAAA,iBAAA,GAAA,mBAAA,EAAA,MAAA,CAAA,QAAA,GAAA,IAAA,EAAA,IAAA,GAAA,GAAA,EAAA,IAAA,GAAA,OAAA,EAAA,IAAA,GAAA,IAAA,EAAA,GAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,KAAA,IAAA,EAAA,KAAA,EAAA,KAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAnTI3C,IAAAA,EAQA8C,EARA9C,KACAE,EAOA4C,EAPA5C,cACAL,EAMAiD,EANAjD,UACAM,EAKA2C,EALA3C,UACAO,EAIAoC,EAJApC,OACAH,EAGAuC,EAHAvC,mBACAE,EAEAqC,EAFArC,iBACAK,EACAgC,EADAhC,QAGJ,SAASiC,IACCnI,EAAAA,MAAAA,YAAckG,EAAQlB,OACtB/E,EAAAA,MAAAA,eAAiBiG,EAAQkC,OAAO,SAACC,EAAKC,GAAS3F,OAAAA,KAAKsF,IAAII,EAAIrD,QAAUqD,EAAKC,EAAKtD,QAAUsD,KAC1FjI,EAAAA,MAAAA,gBAAkBsC,KAAK4F,MAAMtD,EAAUuD,aAAezI,EAAMC,MAAAA,aAAeD,EAAMC,MAAAA,YACjFQ,EAAAA,MAAAA,WAAaT,EAAMM,MAAAA,gBAAkBN,EAAMC,MAAAA,YAC3CM,EAAAA,MAAAA,eAAiBP,EAAME,MAAAA,eAAiBF,EAAMS,MAAAA,WAE9CC,EAAAA,MAAAA,OAAOC,EAAIX,EAAMO,MAAAA,eAAiB,EAClCG,EAAAA,MAAAA,OAAOE,EAAIZ,EAAMM,MAAAA,gBAAkB,EAEnCO,EAAAA,MAAAA,qBAAsB,EAAKb,EAAAA,MAAAA,EAAMU,MAAAA,OAAOC,EAAGX,EAAMU,MAAAA,OAAOE,GAC9D8H,QAAQC,IAAI3I,EAAMa,MAAAA,oBAAqB,yBAEjCL,EAAAA,MAAAA,eAAiBR,EAAMM,MAAAA,gBAAkBN,EAAMO,MAAAA,eACrD2E,EAAU0D,MAAMC,OAAY7I,GAAAA,OAAAA,EAAMM,MAAAA,gBAAlC,MACA4E,EAAU0D,MAAME,MAAW9I,GAAAA,OAAAA,EAAMO,MAAAA,eAAjC,MAEQE,IAAAA,EAAeT,EAjBV,MAiBLS,WACFsI,EAEOtI,mCAAAA,OAAAA,EACCA,yBAAAA,OAAAA,EAGGA,wDAAAA,OAAAA,EANjB,oBASA+C,SAAS2B,eAAe,WAAWqB,YAAcuC,EAE3C/H,EAAAA,MAAAA,MAAQ+E,EAAOiD,UACf/H,EAAAA,MAAAA,UAAY8E,EAAOiD,UAEzBC,IACWC,EAAAA,QAAAA,YACXC,IAGJ,SAASF,IAEA,IAAA,IAAIG,EAAI,EAAGA,EAAIpJ,EAAMC,MAAAA,YAAamJ,IAAK,CAClCC,IAAAA,EAAwB,IAAIvF,EAAJ,QAAS8B,EAAoBwD,GACrDlI,EAAAA,MAAAA,QAAQC,EAAEsD,KAAK4E,GAEhB,IAAA,IAAIC,EAAI,EAAGA,EAAItJ,EAAME,MAAAA,eAAgBoJ,IAAK,CAEjC,IAANF,GACMlI,EAAAA,MAAAA,QAAQE,EAAEqD,KAAK,IAAIX,EAAJ,QAASgC,EAAkBwD,IAE9CC,IAAAA,EAAsBvJ,EAAMkB,MAAAA,QAAQE,EAAEkI,GAExC/F,EAAa,IAAI/B,EAAJ,QACb8H,EACAF,GACA,EACAjD,EAAQiD,GAAGE,GACXD,EAAsBG,SAASC,KAAKJ,GACpCE,EAAoBC,SAASC,KAAKF,IAGtCF,EAAsBrF,SAASS,KAAKlB,GACpCgG,EAAoBvF,SAASS,KAAKlB,GAClC2B,EAAUwE,YAAYnG,EAAWrB,YAC3Bb,EAAAA,MAAAA,WAAWoD,KAAKlB,IAKzB,IAAA,IAAI6F,EAAI,EAAGA,EAAIpJ,EAAMC,MAAAA,YAAamJ,IAAK,CAClCO,IAAAA,EAAW,IAAInI,EAAJ,SAAY,EAAG4H,GAAG,GAC7BtF,EAAO9D,EAAMkB,MAAAA,QAAQC,EAAEiI,GAC7BtF,EAAKG,MAAQ0F,EACbA,EAAS1H,SAAW6B,EAAKE,SAAS,GAClCkB,EAAUwE,YAAYC,EAASzH,YACzBb,EAAAA,MAAAA,WAAWoD,KAAKkF,GAErB,IAAA,IAAIL,EAAI,EAAGA,EAAItJ,EAAME,MAAAA,eAAgBoJ,IAAK,CACrCK,IAAAA,EAAW,IAAInI,EAAJ,QAAW8H,GAAI,GAAG,GAC7BxF,EAAO9D,EAAMkB,MAAAA,QAAQE,EAAEkI,GAC7BxF,EAAKG,MAAQ0F,EACbA,EAAS1H,SAAW6B,EAAKE,SAAS,GAClCkB,EAAUwE,YAAYC,EAASzH,YACzBb,EAAAA,MAAAA,WAAWoD,KAAKkF,IAI9B,SAASC,IACLvE,EAAKhC,UAAUC,OAAO,UAAWiC,EAAcsE,SAGnD,SAASV,IACL5D,EAAcuE,iBAAiB,QAAS,WACpCF,MAEJ1E,EAAU4E,iBAAiB,aAAc,WAC/B/I,EAAAA,MAAAA,eAAgB,EAChBgJ,EAAAA,MAAAA,UAAW,IAErB7E,EAAU4E,iBAAiB,aAAc,WACrCE,EAAejE,EAAOiD,WAChBe,EAAAA,MAAAA,UAAW,IAErB7E,EAAU4E,iBAAiB,YAAa,SAACG,GAC7BC,IAAAA,EAAqBD,EAArBC,QAASC,EAAYF,EAAZE,QACbnK,EAAM+J,MAAAA,WACNK,EAAkBF,EAASC,GAC3BE,EAAoBH,EAASC,MAKzC,SAASH,EAAeM,GACAtK,EAAMgB,MAAAA,MACVgF,eAAiBsE,EAAQtE,eAC/B/E,EAAAA,MAAAA,UAAYjB,EAAMgB,MAAAA,MAClBA,EAAAA,MAAAA,MAAQsJ,EAEyB,cAAjCtK,EAAMiB,MAAAA,UAAU+E,cAClBuE,KAKZ,SAASF,EAAoBG,EAAQC,GACQvF,IAAAA,EAAAA,EAAUwF,wBAE7CC,EAASH,EAFPrJ,EAAAA,EAGFyJ,EAASH,EAHQrJ,EAAAA,EAIjByJ,EAAc7K,EAAMkB,MAAAA,QAAQlB,EAAMgB,MAAAA,MAAMiC,MAExC6H,GAD0B,EAASH,EAAAA,UAAAA,EAAQC,EAAQ5K,EAAMU,MAAAA,OAAOC,EAAGX,EAAMU,MAAAA,OAAOE,IACxBZ,EAAMgB,MAAAA,MAAMmC,OAAS,EAAInD,EAAMQ,MAAAA,gBAC7FkI,QAAQC,IAAImC,GAGNC,IAAAA,GAA2B,EAAID,EAAAA,KAAAA,EAA4B,EAAG9K,EAAMa,MAAAA,oBAAqB,EAAG,GAAG,GAErGgK,EAAYnG,QAAQ,SAACsG,GACjBA,EAAW9G,MAAQtB,KAAKqI,MAAMjL,EAAMK,MAAAA,SAAW0K,EAA2B/K,EAAMgB,MAAAA,MAAMiF,aAI9F,SAASmE,EAAkBF,EAASC,GAC5BK,IAAAA,GAAUN,EAAUhF,EAAUgG,YAAclL,EAAMQ,MAAAA,eAClDiK,EAASN,EAAUjF,EAAUiG,UAC7BV,EAASD,EACLA,EAASxK,EAAMM,MAAAA,gBAAkBmK,EACjCT,EAAejE,EAAOP,EAAUC,MAEhCuE,EAAejE,EAAOP,EAAUxD,OAGhCwI,EAASxK,EAAMO,MAAAA,eAAiBP,EAAMQ,MAAAA,eAAiBiK,EACvDT,EAAejE,EAAOP,EAAUzD,MAEhCiI,EAAejE,EAAOP,EAAUE,QAK5C,SAAS0F,IACDpL,EAAMe,MAAAA,eACNsK,GAAgB,GAETnC,EAAAA,QAAAA,YACXoC,sBAAsBF,GAG1B,SAASC,IACChK,EAAAA,MAAAA,WAAWqD,QAAQ,SAACC,GACjBA,EAAalD,SAAS8J,EAAkB5G,KAG3CzD,EAAAA,MAAAA,QAAQC,EAAEuD,QAAQ,SAACsG,GACrBA,EAAWQ,qBAETtK,EAAAA,MAAAA,QAAQE,EAAEsD,QAAQ,SAACsG,GACrBA,EAAWQ,qBAInB,SAASD,EAAkBpH,GACfpC,IAAAA,EAAcoC,EAAdpC,IAAKC,EAASmC,EAATnC,KACPyJ,EAAStH,EAAQuH,YACjBhG,EAAQvB,EAAQwH,WACdxK,EAASgD,EAAThD,EAAGC,EAAM+C,EAAN/C,EACPwK,EAAqB,EAEzBzH,EAAQ0H,6BAGJ1H,EAAQ5B,oBAAR,IAAqC,IAEhCR,GADL6J,EAAqBzH,EAAQ5B,oBAAR,MACavC,EAAMM,MAAAA,gBACpCwL,EAAaC,EAAQ,IAAK5K,GAAIgD,GACtBsH,EAASG,EAAsB5L,EAAMM,MAAAA,iBAC7CyL,EAAQ,IAAK5K,GAAG6D,mBAAmBb,IAKvCA,EAAQ5B,oBAAR,IAAqC,IAEhCkJ,GADLG,EAAqBzH,EAAQ5B,oBAAR,MACgB,EACjCuJ,EAAaC,EAAQ,IAAK5K,GAAIgD,GACtBpC,EAAM6J,EAAsB,GACpCG,EAAQ,IAAK5K,GAAG6D,mBAAmBb,IAKvCA,EAAQ5B,oBAAR,KAAsC,IAEjCmD,GADLkG,EAAqBzH,EAAQ5B,oBAAR,OACe,EAChCuJ,EAAaC,EAAQ,IAAK3K,GAAI+C,GACtBnC,EAAO4J,EAAsB,GACrCG,EAAQ,IAAK3K,GAAG4D,mBAAmBb,IAKvCA,EAAQ5B,oBAAR,KAAsC,IAEjCP,GADL4J,EAAqBzH,EAAQ5B,oBAAR,OACcvC,EAAMO,MAAAA,eACrCuL,EAAaC,EAAQ,IAAK3K,GAAI+C,GACtBuB,EAAQkG,EAAsB5L,EAAMO,MAAAA,gBAC5CwL,EAAQ,IAAK3K,GAAG4D,mBAAmBb,IAK/C,SAAS4H,EAAQjF,EAAGC,GACT/G,OAAAA,EAAMkB,MAAAA,QAAQ4F,GAAGC,GAG5B,SAAS+E,EAAa5G,EAAW8G,GACrB/H,IAAAA,EAAiDiB,EAAjDjB,MAAOD,EAA0CkB,EAA1ClB,SAA0CkB,EAAAA,EAAhCnB,KAAQd,EAAAA,EAAAA,KAAM4C,EAAAA,EAAAA,YACvCX,EAAU+G,UAAUD,GAGf,IAAA,IAAI5C,EAAI,EAAGA,EAAIpF,EAASiB,OAAQmE,IAAK,CACtCpF,EAASoF,GAAGnG,GAAQmG,EACKpJ,EAAMkB,MAAAA,QAAQ2E,GAAauD,GACnCpF,SAASC,EAAM4B,IAAgB7B,EAASoF,IAIjE,SAASmB,IAIA,IAHCtH,IAAAA,EAAOjD,EAAMiB,MAAAA,UAAUgC,KACvBiJ,EAAQlM,EAAMkB,MAAAA,QAAQ+B,GAEnBqG,EAAI,EAAGA,EAAI4C,EAAMjH,OAAQqE,IAAK,CAC7B6C,IAAAA,EAAcD,EAAM5C,GACpB8C,EAAgBD,EAAYlI,MAC5BoI,EAAWrM,EAAMiB,MAAAA,UAAUkC,OAASiJ,EAAcrK,IAAMqK,EAAcpK,KACtEsK,EAAWtM,EAAMiB,MAAAA,UAAUkC,OAASiJ,EAAcV,YAAcU,EAAcT,WAC9EY,EAAgBvM,EAAMiB,MAAAA,UAAUkC,OAASnD,EAAMM,MAAAA,gBAAkBN,EAAMO,MAAAA,eAUvEkC,EARiB,CACnB,EAAI4J,EACJ,EAAIC,EACJC,EAAgBF,EAChBE,EAAgBD,GAIWE,KAAK,SAAC1F,EAAGC,GAC7BnE,OAAAA,KAAKE,IAAIgE,GAAKlE,KAAKE,IAAIiE,GAAK,GAAK,IACzC,GAECtE,GAAAA,EACK,IAAA,IAAI2G,EAAI,EAAGA,EAAI+C,EAAYnI,SAASiB,OAAQmE,IAAK,CAC5CzE,IAAAA,EAAewH,EAAYnI,SAASoF,GAE1CzE,EAAa8H,YAAYzM,EAAMgB,MAAAA,MAAMwB,SAAU,GAC/CmC,EAAa8H,YAAYzM,EAAMiB,MAAAA,UAAUuB,SAAUC,KAO/DiK,OAAOxL,QAAUlB,EAAMkB,MAAAA,QACvBwL,OAAO1M,MAAQA,EAAf,MACAoI,IACAwB,IACA0B,sBAAsBF","file":"js.2c6c00a4.js","sourceRoot":"..\\src","sourcesContent":["let state = {\r\n    rowsAmmount: 3,\r\n    columnsAmmount: 0,\r\n\r\n    centerTolerance: 0.2,\r\n\r\n\r\n    minSpeed: 1,\r\n    maxSpeed: 22,\r\n\r\n\r\n    containerHeight: 0,\r\n    containerWidth: 0,\r\n    containerRatio: 0,\r\n    moduleSize: 0,\r\n    center: {\r\n        X: null,\r\n        Y: null,\r\n    },\r\n    maxPossibleDistance: Infinity,\r\n    shouldAnimate: false,\r\n    force: {},\r\n    prevForce: {},\r\n    modules: {\r\n        x: [],\r\n        y: []\r\n    },\r\n    allModules: []\r\n}\r\n\r\nexport { state };\r\n","import { state } from './state';\r\n\r\nlet hash = 0;\r\nconst getNewHash = () => hash++;\r\n\r\nexport default class module {\r\n    constructor(x, y, isGhost = false, content, getHorizontalSpeed, getVerticalSpeed) {\r\n        let { moduleSize } = state;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.number = getNewHash();\r\n        this.id = `x${this.x}y${this.y}${isGhost ? 'g' : ''}`;\r\n        this.top = y * moduleSize;\r\n        this.left = x * moduleSize;\r\n        this.linkedTo = null;\r\n        this.domElement = this.createDomElement();\r\n        this.setAsGhost(isGhost);\r\n        this.offset = {\r\n            top: 0,\r\n            left: 0,\r\n            null: 0\r\n        }\r\n        this.frameMovementVector = {\r\n            top: 0,\r\n            left: 0\r\n        }\r\n        this.content = content;\r\n        this.getHorizontalSpeed = getHorizontalSpeed;\r\n        this.getVerticalSpeed = getVerticalSpeed;\r\n    }\r\n\r\n    getRight() {\r\n        let { moduleSize } = state;\r\n        return this.left + moduleSize;\r\n    }\r\n\r\n    getBottom() {\r\n        let { moduleSize } = state;\r\n        return this.top + moduleSize;\r\n    }\r\n\r\n    setForce(position, ammount) {\r\n        this.frameMovementVector[position] = ammount;\r\n    }\r\n\r\n    resetMovementVector() {\r\n        this.setForce('top', 0);\r\n        this.setForce('left', 0);\r\n    }\r\n\r\n    applyOffset(position, ammount) {\r\n        const { offset } = this;\r\n\r\n        if (ammount) {\r\n            offset[position] = ammount;\r\n        } else {\r\n            offset[position] = 0;\r\n        }\r\n    }\r\n\r\n    calculateCurrentFrameOffset() {\r\n        const { offset } = this;\r\n        if (offset.top) {\r\n            const { top } = offset;\r\n\r\n            // This is setup for next frame\r\n            // decide wether to move the full ammount, or all that remains, whichever is lower\r\n            const absoluteAmmount = Math.min(Math.abs(top), state.maxSpeed);\r\n            const signedAmmount = absoluteAmmount * Math.sign(top);\r\n\r\n            this.setForce('top', signedAmmount);\r\n\r\n            // Reduce outstanding offset by ammount\r\n            offset.top -= signedAmmount;\r\n        }\r\n        if (offset.left) {\r\n            const { left } = offset;\r\n            const absoluteAmmount = Math.min(Math.abs(left), state.maxSpeed);\r\n            const signedAmmount = absoluteAmmount * Math.sign(left);\r\n\r\n            this.setForce('left', signedAmmount);\r\n            offset.left -= signedAmmount;\r\n        }\r\n    }\r\n\r\n    compileFrameMovementVector() {\r\n        // Make element calculate any outstanding offsets to move\r\n        this.calculateCurrentFrameOffset();\r\n\r\n        // Aka if we are not on nullforce\r\n        if (state.force.axis) {\r\n            const position = state.force.position;\r\n            const forceAmmount = state.force.isVert ? this.getVerticalSpeed() : this.getHorizontalSpeed();\r\n\r\n            this.setForce(position, forceAmmount);\r\n        }\r\n    }\r\n\r\n    setAsGhost(isGhost, linkTo) {\r\n        this.isGhost = isGhost;\r\n        this.linkedTo = isGhost && linkTo ? linkTo : null;\r\n        this.domElement.classList.toggle('ghost', isGhost);\r\n    }\r\n\r\n    createDomElement() {\r\n        let newElement = document.createElement(\"div\");\r\n        newElement.className = \"module\";\r\n        newElement.id = this.id;\r\n        return newElement;\r\n    }\r\n\r\n    getContent() {\r\n        switch (typeof this.content) {\r\n            case 'string':\r\n                return this.getStringContent();\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    getStringContent() {\r\n        const { content } = this;\r\n        return `} #${this.id}:after {content: '${content}'`\r\n    }\r\n\r\n    getStyleString() {\r\n        this.top += this.frameMovementVector.top;\r\n        this.left += this.frameMovementVector.left;\r\n        this.resetMovementVector();\r\n\r\n        return `#${this.id}{ top: ${this.top}px; left:${this.left}px; ${this.getContent()}}`\r\n    }\r\n}\r\n","import { state } from './state';\r\n\r\nexport default class line {\r\n    constructor(data, number) {\r\n        this.data = data;\r\n        this.number = number;\r\n        this.contents = [];\r\n        this.ghost = null;\r\n        this.speed = 0;\r\n    }\r\n\r\n    linkGhostToElement(element) {\r\n        const { ghost } = this;\r\n        ghost.linkedTo = element;\r\n    }\r\n\r\n    setGhostPosition() {\r\n        const { ghost } = this;\r\n        const { linkedTo } = ghost;\r\n\r\n        // Here we calculate the position of the ghost, looks messy but\r\n        //essentially the ghost has to be on the opposite side of the real module\r\n        if (this.data.isVert) {\r\n            const { top, frameMovementVector } = linkedTo;\r\n            const { containerHeight } = state;\r\n\r\n            // We decide if we have to substract or add the height of the container\r\n            // to the top value of the ghost. Use positive as a default for the first frame of animation.\r\n            const operation = (Math.sign(top) * -1) || 1;\r\n\r\n            // And we add however much the real module is going to move this frame.\r\n            const newPosition = top + (containerHeight * operation) + frameMovementVector.top;\r\n            ghost.top = newPosition;\r\n            ghost.left = ghost.linkedTo.left + frameMovementVector.left;\r\n        } else {\r\n            const { left, frameMovementVector } = ghost.linkedTo;\r\n            const { containerWidth } = state;\r\n            let operation = (Math.sign(left) * -1) || 1;\r\n            const newPosition = left + (containerWidth * operation) + frameMovementVector.left;\r\n            ghost.left = newPosition;\r\n            ghost.top = ghost.linkedTo.top + frameMovementVector.top;\r\n\r\n        }\r\n        ghost.content = linkedTo.content;\r\n    }\r\n\r\n    shiftLine(resetElement) {\r\n        const { ghost, contents } = this;\r\n        const { axis } = this.data;\r\n        const isCurrentMovementPositive = resetElement.frameMovementVector[this.data.position] > 0\r\n\r\n        // Remove old element from container since it is now a ghost\r\n        contents.splice(resetElement[this.data.axis], 1);\r\n\r\n        if (isCurrentMovementPositive) {\r\n            contents.unshift(resetElement);\r\n        } else {\r\n            contents.push(resetElement)\r\n        }\r\n\r\n        // Set correct axis number for each module in this line.\r\n        contents.forEach((singleModule, order) => {\r\n            singleModule[axis] = order;\r\n        })\r\n\r\n        resetElement.top = ghost.top;\r\n        resetElement.left = ghost.left;\r\n\r\n        const elementToLink = isCurrentMovementPositive ? this.getLast() : this.getFirst();\r\n        this.linkGhostToElement(elementToLink);\r\n    }\r\n\r\n\r\n    getFirst() {\r\n        return this.contents[0];\r\n    }\r\n\r\n    getLast() {\r\n        return this.contents[this.contents.length - 1];\r\n    }\r\n\r\n    getSpeed() {\r\n        return this.speed;\r\n    }\r\n}\r\n","export const container = document.getElementById('visualContainer');\r\nexport const modulePositions = document.getElementById('modulePositions');\r\nexport const body = document.getElementsByTagName('body')[0];\r\nexport const devModeToggle = document.getElementById('devModeToggle')\r\n\r\nexport const quadrants = {\r\n    bot: 'BOTTOM',\r\n    top: 'TOP',\r\n    left: 'LEFT',\r\n    right: 'RIGHT'\r\n}\r\n\r\nexport const positions = {\r\n    left: 'left',\r\n    top: 'top'\r\n}\r\n\r\nexport const horizontalIdentity = {\r\n    axis: 'x',\r\n    isVert: false,\r\n    position: 'left',\r\n    inverseAxis: 'y'\r\n}\r\n\r\nexport const verticalIdentity = {\r\n    axis: 'y',\r\n    isVert: true,\r\n    position: 'top',\r\n    inverseAxis: 'x'\r\n}\r\n\r\nexport const forces = {\r\n    [quadrants.bot]: {\r\n        quadrantName: quadrants.bot,\r\n        ...verticalIdentity,\r\n        direction: 1\r\n    },\r\n    [quadrants.top]: {\r\n        quadrantName: quadrants.top,\r\n        ...verticalIdentity,\r\n        direction: -1\r\n    },\r\n    [quadrants.left]: {\r\n        quadrantName: quadrants.left,\r\n        ...horizontalIdentity,\r\n        direction: -1\r\n    },\r\n    [quadrants.right]: {\r\n        quadrantName: quadrants.right,\r\n        ...horizontalIdentity,\r\n        direction: 1\r\n    },\r\n    nullForce: {\r\n        quadrantName: 'nullForce',\r\n        axis: null,\r\n        isVert: null,\r\n        position: null,\r\n        inverse: null,\r\n        direction: null\r\n    }\r\n}\r\n\r\nexport const message = [\r\n    'COMING SOON ',\r\n    'COMING SOON ',\r\n    'COMING SOON ',\r\n    'COMING SOON ',\r\n    'COMING SOON ',\r\n    'COMING SOON '\r\n]\r\n","import { state } from './state';\r\nimport { modulePositions } from './const';\r\n\r\nclass cssHandler {\r\n    constructor() {\r\n        this.modulesList = [];\r\n        this.frameCss = '';\r\n    }\r\n\r\n    getModuleCss(moduleCss) {\r\n        this.frameCss += moduleCss;\r\n    }\r\n\r\n    resetFrameCss() {\r\n        this.frameCss = '';\r\n    }\r\n\r\n    applyCssToDom() {\r\n        modulePositions.textContent = this.frameCss;\r\n    }\r\n\r\n    getAllCss() {\r\n        state.allModules.forEach((singleModule) => {\r\n            this.getModuleCss(singleModule.getStyleString());\r\n        });\r\n        this.applyCssToDom();\r\n        this.resetFrameCss();\r\n    }\r\n}\r\n\r\nexport default new cssHandler();\r\n","export const pyth = (a, b) => Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))\r\nexport const distance = (x1, y1, x2, y2) => pyth(x1 - x2, y1 - y2)\r\n\r\n// Pretty much ripped straight from p5's math helper.\r\n// https://github.com/processing/p5.js/blob/1.0.0/src/math/calculation.js\r\n\r\nexport const map = (n, start1, stop1, start2, stop2, withinBounds) => {\r\n    const newval = (n - start1) / (stop1 - start1) * (stop2 - start2) + start2;\r\n\r\n    if (!withinBounds) {\r\n        return newval;\r\n    }\r\n\r\n    if (start2 < stop2) {\r\n        return constrain(newval, start2, stop2);\r\n    } else {\r\n        return constrain(newval, stop2, start2);\r\n    }\r\n};\r\n\r\nexport const constrain = (n, low, high) => Math.max(Math.min(n, high), low);\r\n","import module from './module';\r\nimport line from './line';\r\nimport cssHandler from './cssHandler';\r\nimport * as constants from './const';\r\nimport { state } from './state';\r\nimport { pyth, map, distance } from './mathUtil';\r\n\r\nconst {\r\n    body,\r\n    devModeToggle,\r\n    container,\r\n    quadrants,\r\n    forces,\r\n    horizontalIdentity,\r\n    verticalIdentity,\r\n    message\r\n} = constants;\r\n\r\nfunction setup() {\r\n    state.rowsAmmount = message.length;\r\n    state.columnsAmmount = message.reduce((acc, curr) => Math.max(acc.length || acc, curr.length || curr));\r\n    state.containerHeight = Math.floor(container.offsetHeight / state.rowsAmmount) * state.rowsAmmount;\r\n    state.moduleSize = state.containerHeight / state.rowsAmmount;\r\n    state.containerWidth = state.columnsAmmount * state.moduleSize;\r\n\r\n    state.center.X = state.containerWidth / 2;\r\n    state.center.Y = state.containerHeight / 2;\r\n\r\n    state.maxPossibleDistance = pyth(state.center.X, state.center.Y);\r\n    console.log(state.maxPossibleDistance, 'MAX POSSIBLE DISTANCE');\r\n\r\n    state.containerRatio = state.containerHeight / state.containerWidth;\r\n    container.style.height = `${state.containerHeight}px`;\r\n    container.style.width = `${state.containerWidth}px`;\r\n\r\n    const { moduleSize } = state;\r\n    const baseCss = `\r\n    .module {\r\n        width: ${moduleSize}px;\r\n        height: ${moduleSize}px;\r\n    }\r\n    .module:after {\r\n        font-size: ${moduleSize}px;\r\n    }\r\n    `\r\n    document.getElementById('baseCss').textContent = baseCss;\r\n\r\n    state.force = forces.nullForce;\r\n    state.prevForce = forces.nullForce;\r\n\r\n    prepModules();\r\n    cssHandler.getAllCss();\r\n    setListeners();\r\n}\r\n\r\nfunction prepModules() {\r\n    // Prep regualr modules\r\n    for (let i = 0; i < state.rowsAmmount; i++) {\r\n        const currentHorizontalLine = new line(horizontalIdentity, i);\r\n        state.modules.x.push(currentHorizontalLine);\r\n\r\n        for (let e = 0; e < state.columnsAmmount; e++) {\r\n\r\n            if (i === 0) {\r\n                state.modules.y.push(new line(verticalIdentity, e));\r\n            }\r\n            const currentVerticalLine = state.modules.y[e];\r\n\r\n            let newElement = new module(\r\n                e,\r\n                i,\r\n                false,\r\n                message[i][e],\r\n                currentHorizontalLine.getSpeed.bind(currentHorizontalLine),\r\n                currentVerticalLine.getSpeed.bind(currentVerticalLine)\r\n            );\r\n\r\n            currentHorizontalLine.contents.push(newElement);\r\n            currentVerticalLine.contents.push(newElement);\r\n            container.appendChild(newElement.domElement);\r\n            state.allModules.push(newElement);\r\n        }\r\n    }\r\n\r\n    // Prep ghosts\r\n    for (let i = 0; i < state.rowsAmmount; i++) {\r\n        const newGhost = new module(-1, i, true);\r\n        const line = state.modules.x[i];\r\n        line.ghost = newGhost;\r\n        newGhost.linkedTo = line.contents[0];\r\n        container.appendChild(newGhost.domElement);\r\n        state.allModules.push(newGhost);\r\n    }\r\n    for (let e = 0; e < state.columnsAmmount; e++) {\r\n        const newGhost = new module(e, -1, true);\r\n        const line = state.modules.y[e];\r\n        line.ghost = newGhost;\r\n        newGhost.linkedTo = line.contents[0];\r\n        container.appendChild(newGhost.domElement);\r\n        state.allModules.push(newGhost);\r\n    }\r\n}\r\n\r\nfunction toggleDevMode() {\r\n    body.classList.toggle('devMode', devModeToggle.checked);\r\n}\r\n\r\nfunction setListeners() {\r\n    devModeToggle.addEventListener('click', () => {\r\n        toggleDevMode();\r\n    })\r\n    container.addEventListener('mouseenter', () => {\r\n        state.shouldAnimate = true;\r\n        state.inBounds = true;\r\n    })\r\n    container.addEventListener('mouseleave', () => {\r\n        changeQuadrant(forces.nullForce);\r\n        state.inBounds = false;\r\n    })\r\n    container.addEventListener('mousemove', (event) => {\r\n        const { clientX, clientY } = event;\r\n        if (state.inBounds) {\r\n            calculateQuadrant(clientX, clientY);\r\n            calculateLinesSpeed(clientX, clientY);\r\n        }\r\n    })\r\n}\r\n\r\nfunction changeQuadrant(newQuad) {\r\n    const currentQuad = state.force;\r\n    if (currentQuad.quadrantName !== newQuad.quadrantName) {\r\n        state.prevForce = state.force;\r\n        state.force = newQuad;\r\n        // Dont calc offset on first enter\r\n        if (!(state.prevForce.quadrantName === 'nullForce')) {\r\n            calculateOffset();\r\n        }\r\n    }\r\n}\r\n\r\nfunction calculateLinesSpeed(mouseX, mouseY) {\r\n    const { x: containerX, y: containerY } = container.getBoundingClientRect()\r\n\r\n    const localX = mouseX - containerX;\r\n    const localY = mouseY - containerY;\r\n    const linesToCalc = state.modules[state.force.axis];\r\n    const currentDistanceToCenter = distance(localX, localY, state.center.X, state.center.Y);\r\n    const RatioFixedDistanceToCenter = currentDistanceToCenter * (state.force.isVert ? 1 : state.containerRatio);\r\n    console.log(RatioFixedDistanceToCenter);\r\n    //const minimumDistance = state.maxPossibleDistance * (1 - state.centerTolerance);\r\n\r\n    const distanceToCenterModifier = map(RatioFixedDistanceToCenter, 0, state.maxPossibleDistance, 0, 1, true)\r\n\r\n    linesToCalc.forEach((singleLine) => {\r\n        singleLine.speed = Math.round(state.maxSpeed * distanceToCenterModifier * state.force.direction);\r\n    })\r\n}\r\n\r\nfunction calculateQuadrant(clientX, clientY) {\r\n    let mouseX = (clientX - container.offsetLeft) * state.containerRatio;\r\n    let mouseY = clientY - container.offsetTop;\r\n    if (mouseY > mouseX) {\r\n        if (mouseX > state.containerHeight - mouseY) {\r\n            changeQuadrant(forces[quadrants.bot]);\r\n        } else {\r\n            changeQuadrant(forces[quadrants.left])\r\n        }\r\n    } else {\r\n        if (mouseX < state.containerWidth * state.containerRatio - mouseY) {\r\n            changeQuadrant(forces[quadrants.top])\r\n        } else {\r\n            changeQuadrant(forces[quadrants.right])\r\n        }\r\n    }\r\n}\r\n\r\nfunction animationFrame() {\r\n    if (state.shouldAnimate) {\r\n        setNewPositions(true)\r\n    }\r\n    cssHandler.getAllCss();\r\n    requestAnimationFrame(animationFrame);\r\n}\r\n\r\nfunction setNewPositions() {\r\n    state.allModules.forEach((singleModule) => {\r\n        if (!singleModule.isGhost) setModulePosition(singleModule);\r\n    });\r\n\r\n    state.modules.x.forEach((singleLine) => {\r\n        singleLine.setGhostPosition();\r\n    })\r\n    state.modules.y.forEach((singleLine) => {\r\n        singleLine.setGhostPosition();\r\n    })\r\n}\r\n\r\nfunction setModulePosition(element) {\r\n    const { top, left } = element;\r\n    const bottom = element.getBottom();\r\n    const right = element.getRight();\r\n    const { x, y } = element;\r\n    let outstandingAmmount = 0;\r\n\r\n    element.compileFrameMovementVector();\r\n\r\n    // Bottoms\r\n    if (element.frameMovementVector['top'] > 0) {\r\n        outstandingAmmount = element.frameMovementVector['top'];\r\n        if ((top + outstandingAmmount) >= state.containerHeight) {\r\n            shiftElement(getLine('y', x), element);\r\n        } else if ((bottom + outstandingAmmount) > state.containerHeight) {\r\n            getLine('y', x).linkGhostToElement(element);\r\n        }\r\n    }\r\n\r\n    // Top\r\n    if (element.frameMovementVector['top'] < 0) {\r\n        outstandingAmmount = element.frameMovementVector['top'];\r\n        if ((bottom + outstandingAmmount) <= 0) {\r\n            shiftElement(getLine('y', x), element);\r\n        } else if ((top + outstandingAmmount) < 0) {\r\n            getLine('y', x).linkGhostToElement(element);\r\n        }\r\n    }\r\n\r\n    // Left\r\n    if (element.frameMovementVector['left'] < 0) {\r\n        outstandingAmmount = element.frameMovementVector['left'];\r\n        if ((right + outstandingAmmount) <= 0) {\r\n            shiftElement(getLine('x', y), element);\r\n        } else if ((left + outstandingAmmount) < 0) {\r\n            getLine('x', y).linkGhostToElement(element);\r\n        }\r\n    }\r\n\r\n    // Right\r\n    if (element.frameMovementVector['left'] > 0) {\r\n        outstandingAmmount = element.frameMovementVector['left'];\r\n        if ((left + outstandingAmmount) >= state.containerWidth) {\r\n            shiftElement(getLine('x', y), element);\r\n        } else if ((right + outstandingAmmount) > state.containerWidth) {\r\n            getLine('x', y).linkGhostToElement(element);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getLine(a, b) {\r\n    return state.modules[a][b];\r\n}\r\n\r\nfunction shiftElement(container, shiftedElement) {\r\n    const { ghost, contents, data: { axis, inverseAxis } } = container;\r\n    container.shiftLine(shiftedElement);\r\n\r\n    // Assign to each element of the container its new correct position\r\n    for (let i = 0; i < contents.length; i++) {\r\n        contents[i][axis] = i;\r\n        const inverseContainer = state.modules[inverseAxis][i];\r\n        inverseContainer.contents[ghost[inverseAxis]] = contents[i];\r\n    }\r\n}\r\n\r\nfunction calculateOffset() {\r\n    const axis = state.prevForce.axis;\r\n    const lines = state.modules[axis];\r\n\r\n    for (let e = 0; e < lines.length; e++) {\r\n        const currentLine = lines[e];\r\n        const moduleToCheck = currentLine.ghost;\r\n        const negative = state.prevForce.isVert ? moduleToCheck.top : moduleToCheck.left\r\n        const positive = state.prevForce.isVert ? moduleToCheck.getBottom() : moduleToCheck.getRight();\r\n        const containerSize = state.prevForce.isVert ? state.containerHeight : state.containerWidth;\r\n\r\n        const possibleValues = [\r\n            0 - negative,\r\n            0 - positive,\r\n            containerSize - negative,\r\n            containerSize - positive,\r\n        ]\r\n\r\n        // find smallest absolute size\r\n        const ammount = possibleValues.sort((a, b) => {\r\n            return Math.abs(a) > Math.abs(b) ? 1 : -1\r\n        })[0];\r\n\r\n        if (ammount) {\r\n            for (let i = 0; i < currentLine.contents.length; i++) {\r\n                const singleModule = currentLine.contents[i];\r\n                // Are we on a direction that has offset?\r\n                singleModule.applyOffset(state.force.position, 0)\r\n                singleModule.applyOffset(state.prevForce.position, ammount)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n(() => {\r\n    window.modules = state.modules;\r\n    window.state = state;\r\n    setup();\r\n    toggleDevMode();\r\n    requestAnimationFrame(animationFrame);\r\n})()\r\n\r\n// TODO:\r\n// \r\n// use getBoundingClientRect!!!!!!!!!!!\r\n// Set new \"active column\" var\r\n// general cleanup\r\n// use foreachs whenever possible\r\n//\r\n//\r\n//\r\n//\r\n//\r\n"]}